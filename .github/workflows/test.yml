name: Test

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  get-python-versions:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      python-versions: ${{ steps.get-versions.outputs.python-versions }}
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v7

      - name: Get Python versions from uv
        id: get-versions
        run: |
          set -euo pipefail
          MIN_VERSION=$(uvx --from=toml-cli toml get --toml-path=pyproject.toml project.requires-python | sed 's/>=//;s/"//g')
          PYO3_FFI_VERSION=$(grep -m 1 -A 1 'name = "pyo3-ffi"' Cargo.lock | tail -n1 | cut -d '"' -f 2)
          # Download the crate once and reuse the Cargo.toml extraction to avoid repeated curl calls
          TMP_CRATE=$(mktemp)
          curl -sL "https://static.crates.io/crates/pyo3-ffi/pyo3-ffi-$PYO3_FFI_VERSION.crate" -o "$TMP_CRATE"
          # extract Cargo.toml content from the downloaded crate
          CARGO_TOML_CONTENT=$(tar -xzO -f "$TMP_CRATE" "pyo3-ffi-$PYO3_FFI_VERSION/Cargo.toml" 2>/dev/null || true)
          # get the supported CPython max version from the pyo3-ffi crate (from the extracted Cargo.toml)
          MAX_VERSION=$(echo "$CARGO_TOML_CONTENT" | uvx --from=toml-cli toml get --toml-path=/dev/stdin package.metadata.cpython.max-version | tr -d '"')
          # get the supported PyPy max version
          PYPY_MAX=$(echo "$CARGO_TOML_CONTENT" | uvx --from=toml-cli toml get --toml-path=/dev/stdin package.metadata.pypy.max-version | tr -d '"')
          # gather the list once and derive CPython and (optional) PyPy sets from it
          LIST=$(uv python list --all-versions --output-format json)

          CPYTHON_VERSIONS=$(echo "$LIST" | jq -c --arg min "$MIN_VERSION" --arg max "$MAX_VERSION" '
            ($min | split(".") | {major: .[0]|tonumber, minor: .[1]|tonumber}) as $minv |
            ($max | split(".") | {major: .[0]|tonumber, minor: .[1]|tonumber}) as $maxv |
            [.[] | {v:.version_parts, t:.variant, impl:.implementation}]
            | unique_by([.v.minor,.impl])
            | map(select(
                (.impl == "cpython") and
                ((.v.major > $minv.major or (.v.major == $minv.major and .v.minor >= $minv.minor)) and
                 (.v.major < $maxv.major or (.v.major == $maxv.major and .v.minor <= $maxv.minor)))
              ))
            | map("\(.v.major).\(.v.minor)\(if .t=="freethreaded" then "t" else "" end)")')
          PYPY_VERSIONS=$(echo "$LIST" | jq -c --arg min "$MIN_VERSION" --arg max "$PYPY_MAX" '
            ($min | split(".") | {major: .[0]|tonumber, minor: .[1]|tonumber}) as $minv |
            ($max | split(".") | {major: .[0]|tonumber, minor: .[1]|tonumber}) as $maxv |
            [.[] | {v:.version_parts, t:.variant, impl:.implementation}]
            | unique_by([.v.minor,.impl])
            | map(select(
                (.impl == "pypy") and
                ((.v.major > $minv.major or (.v.major == $minv.major and .v.minor >= $minv.minor)) and
                  (.v.major < $maxv.major or (.v.major == $maxv.major and .v.minor <= $maxv.minor)))
              ))
            | map("pypy-\(.v.major).\(.v.minor)")')
          # merge arrays
          versions=$(jq -nc --argjson a "$CPYTHON_VERSIONS" --argjson b "$PYPY_VERSIONS" '$a + $b')

          echo "python-versions=$versions" >> $GITHUB_OUTPUT

  test:
    needs: get-python-versions
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.get-python-versions.outputs.python-versions) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up mold linker
        uses: rui314/setup-mold@v1

      - uses: Swatinem/rust-cache@v2.8.1

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: false # true
          python-version: ${{ matrix.python-version }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Sync build and test dependencies
        run: uv sync --only-group build --only-group test

      - name: Build extension
        run: |
          # https://github.com/astral-sh/uv/issues/16434
          # $(uv python find) -m maturin develop --uv
          .venv/bin/python -m maturin develop --uv

      - name: Run tests
        run: |
          # https://github.com/astral-sh/uv/issues/16434
          # $(uv python find) -m pytest
          .venv/bin/pytest
